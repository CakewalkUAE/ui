{
  "name": "button",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "name": "button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconPrefix, IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { IconName, IconStyle, IconLookup, IconDefinition, findIconDefinition, library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\n// import { solid } from '@fortawesome/fontawesome-svg-core/import.macro';\n// import { regular } from '@fortawesome/fontawesome-svg-core/import.macro';\n\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n  VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  icon?: IconName;\n  iconStyle?: IconStyle;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, icon, iconStyle = \"solid\", ...props }, ref) => {\n    library.add(fas)\n    library.add(far)\n    const Comp = asChild ? Slot : \"button\";\n    const iconPrefix: IconPrefix = `fa${iconStyle === \"solid\" ? \"s\" : iconStyle === 'light' ? \"l\" : \"r\"}`;\n\n    // const iconStyleName: IconLookup = { prefix: `fa-${iconStyle}`, iconName: icon! }\n    const iconStyleLookup: IconLookup = { prefix: `${iconPrefix}`, iconName: icon! }\n\n    const iconNameDefinition: IconDefinition = findIconDefinition(iconStyleLookup)\n\n    // Conditionally render the icon based on iconStyle and icon prop\n    const renderIcon = icon ? (\n      <FontAwesomeIcon icon={iconNameDefinition} />\n    ) : null;\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      >\n        <>\n          {renderIcon}\n          {props.children}\n        </>\n      </Comp>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n"
    }
  ],
  "type": "components:ui"
}