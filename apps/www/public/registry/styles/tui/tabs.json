{
  "name": "tabs",
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "files": [
    {
      "name": "tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\nimport { cva } from \"class-variance-authority\"\nimport { Icon, IconType } from \"./icon\"\n\nconst Tabs = TabsPrimitive.Root\n\n\nconst tabListVariants = cva(\n  \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground max-w-full overflow-x-auto overflow-y-clip ring-0 outline-none border-none\",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        underline: \"bg-background border-b border-muted shadow-none rounded-none py-6 p-0\",\n        bar: \"bg-background p-0 flex h-full rounded-md border-muted border-2 shadow-none\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  { variant?: \"default\" | \"underline\" | \"bar\" } &\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, variant, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(tabListVariants({ variant: variant ? variant : \"default\", className }))}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst tabsTriggerVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm \",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        underline:\n          \"border-b-2 border-transparent pb-3 first-of-type:px-2 w-full ring-offset-0 rounded-none data-[state=active]:border-primary data-[state=active]:text-primary ring-0 bg-transparent shadow-none data-[state=active]:shadow-none\",\n        bar:\n          \"border-b-2 border-transparent border-r-2 last-of-type:border-r-0 border-r-muted h-full py-6 w-full rounded-none data-[state=active]:border-b-primary data-[state=active]:text-primary ring-0 shadow-none data-[state=active]:shadow-none\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  {\n    variant?: \"default\" | \"underline\" | \"bar\";\n    icon?: IconType;\n    iconClassName?: string;\n    badge?: string;\n  } &\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, variant, children, icon, iconClassName, badge, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(tabsTriggerVariants({ variant: variant ? variant : \"default\", className: className + (icon !== undefined ? \" first-of-type:pl-20 sm:first-of-type:pl-2\" : \"\") }))}\n    {...props}\n  >\n    <div>\n      {icon && <Icon name={icon || \"check-solid\"} className={cn(\"w-4 h-4 pr-2\", iconClassName)} />}\n      {children}\n      {badge && <span className=\"ml-3 rounded-xl py-1 px-2 text-xs text-primary bg-primary-foreground\">{badge}</span>}\n\n    </div>\n  </TabsPrimitive.Trigger>\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
    }
  ],
  "type": "components:ui"
}